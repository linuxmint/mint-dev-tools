#!/usr/bin/python3
import gi
import os
import psutil
import subprocess
import time
import select
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk, Gio, Notify

monitor = None

def print_and_save(output_file, data):
    print(data)
    output_file.write(data + "\n")

class Monitor():

    def __init__(self):
        self.pid = subprocess.check_output('pidof cinnamon', encoding='UTF-8', shell=True).strip()
        self.process = psutil.Process(int(self.pid))

        self.log = subprocess.Popen(["tail", "-f", "-n100", os.path.expanduser("~/.xsession-errors")], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        self.poll = select.poll()
        self.poll.register(self.log.stdout)

    def get_used_memory(self):
        # Used memory in MB
        mem = self.process.memory_info()
        memory = round(((mem.rss - mem.shared) / 1024 / 1024))
        return ("%d MB" % memory)

    def get_start_logs(self, output_file):
        # Read the last 100 lines
        i = 100
        while (i > 0):
            i -= 1
            print_and_save(output_file, self.get_log_line())

    def get_log_line(self):
        return self.log.stdout.readline().decode("utf-8").strip()

    def get_cpu_time(self):
        # Used CPU time
        cpu = self.process.cpu_times()
        used = cpu.user + cpu.children_user + cpu.system + cpu.children_system
        t = time.strftime('%H:%M:%S', time.gmtime(used))
        return t

def sleep(interval, output_file):
    now = 0
    elapsed = time.monotonic()
    # This is the same as time.sleep(int) but instead of sleeping it checks the log file.
    while now - elapsed < interval:
        now = time.monotonic()
        if not monitor.poll.poll(1):
            continue
        print_and_save(output_file, "---------------------------------------------")
        print_and_save(output_file, monitor.get_log_line())

def main_quit(notif):
    monitor.poll.unregister(monitor.log.stdout)
    Gtk.main_quit()

def show_stats(notif, action):
    subprocess.Popen(["xdg-open", os.path.expanduser("~/.cinnamon/stats.log")])
    notif.close()
    main_quit(None)

if __name__ == '__main__':

    settings = Gio.Settings("com.linuxmint.dev")
    interval = settings.get_int("cinnamon-stats-tracker-interval")
    measures = settings.get_int("cinnamon-stats-tracker-measures")

    Notify.init("cinnamon-stats-tracker")

    notification = Notify.Notification.new("Stats Tracker Started", "The Cinnamon stats are being tracked right now. Don't interact with Cinnamon for the next 10 minutes. A notification will pop up when the tracker is finished.", "cinnamon-symbolic")
    notification.show()

    with open(os.path.expanduser("~/.cinnamon/stats.log"), "w") as output_file:
        monitor = Monitor()
        print_and_save(output_file, "---------------------------------------------")
        print_and_save(output_file, "  INITIAL STATS")
        print_and_save(output_file, "---------------------------------------------")
        print_and_save(output_file, "PID %s" % monitor.pid)
        monitor.get_start_logs(output_file)
        print_and_save(output_file, "RAM: %s" % monitor.get_used_memory())
        print_and_save(output_file, "CPU time: %s" % monitor.get_cpu_time())

        if (measures > 0):
            for i in range(measures):
                sleep(interval, output_file)
                print_and_save(output_file, "---------------------------------------------")
                print_and_save(output_file, "  AFTER %d minutes" % (round(interval/60) * (i+1)))
                print_and_save(output_file, "---------------------------------------------")
                print_and_save(output_file, "RAM: %s" % monitor.get_used_memory())
                print_and_save(output_file, "CPU time: %s" % monitor.get_cpu_time())

    notification = Notify.Notification.new("Stats Tracker Finished", "The stats were successfully recorded in ~/.cinnamon/stats.log. You can now launch apps and use Cinnamon normally.", "cinnamon-symbolic")
    notification.add_action("action_show", "Show stats", show_stats)
    notification.set_urgency(Notify.Urgency.CRITICAL)
    notification.connect("closed", main_quit)
    notification.show()
    Gtk.main()